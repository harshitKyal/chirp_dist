{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/rest.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<button (click)=\\\"onSendChirp()\\\">\\n  Send Chirp\\n</button>\\n\"","import { Component } from '@angular/core';\nimport ChirpConnect from 'chirp-js-sdk'\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { RestService } from './rest.service';\n// import (RestService)\n// import { Injectable } from '@angular/core';\n// import { RestService } from '/chirp/src/app/rest.service.ts';\n// import { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'chirp';\n  chirp = new ChirpConnect('D3eCaAE33f94Fc0fcCc3CCa22')\n  identifier = 'hello';\n  payload;\n  configUrl;\n  data :any;\n  pp;\n  constructor(private http: HttpClient,private RestService: RestService) {\n    this.chirp.setConfig('ultrasonic');\n  }\n\n  onSendChirp() {\n    this.identifier = this.getRandomPayload();\n    // this.identifier = \"harshit\"\n    // console.log(\"before devoce\",this.identifier)\n    this.payload = new TextEncoder().encode(this.identifier);\n    // console.log(\"payload\",this.payload)\n    // this.pp = new TextDecoder().decode(this.payload)\n    // console.log(\"after devoce\",this.pp)\n    this.data ={\n      // 'payload':this.identifier,\n      'encoded':this.payload\n\n    };\n    console.log(this.data)\n    this.RestService.apiCaller('post','/saveSendSound',this.data).subscribe(data=>{\n      console.log(data)\n    })\n    // console.log(this.data)\n    // this.configUrl = \"http://localhost:8100\";\n    // this.http.get(this.configUrl);\n    // console.log('sent ' + this.identifier)\n    // console.log(this.payload)\n    this.chirp.send(this.payload, err => err ?\n      console.error(err) :\n      console.log('sent' + this.payload)\n    )\n  }\n\n  getRandomPayload() {\n    let possible = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";\n    let text = \"\";\n    for (let i = 0; i < 8; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n  // const payload = new TextEncoder('utf-8').encode(identifier);\n  // chirp.send(payload);\n}\n\n\n// setHeaders() {\n\n//   const headers = new HttpHeaders({\n//     'Authorization': 'Basic ' + btoa('D3eCaAE33f94Fc0fcCc3CCa22:A5eeA7ad22dbB4EfB0e4FEe3e51faBFF2CCa403AF5D566BB2b'),\n//   });\n\n//   return headers;\n// }\n\n// this.http.get('https://audio.chirp.io/v3/ultrasonic', { headers: this.setHeaders(), responseType: 'text' })\n// .subscribe((res: any) => {\n//   console.log('res', res);\n//   console.log('hex', this.fromHexString(res));\n//   const blob = new Blob([res], { type: 'audio/mpeg' });\n//   const url = window.URL.createObjectURL(blob);\n//   window.open(url);\n//   var base64data;\n//   var reader = new FileReader();\n//   reader.readAsDataURL(blob);\n//   reader.onloadend = function () {\n//     base64data = reader.result;\n//     console.log(base64data);\n//   }\n\n// });","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestService {\n\n  uri = '';\n  constructor(private http: HttpClient) { }\n\n  \n  public apiCaller(type: string, url: string, data?: any): any {\n    // console.log(\"api aller\")\n    //  this.uri = this.api + url;\n    //  this.uri = 'http://api.testautotech.xyz' + url;\n    // this.uri = 'http://localhost:8100' + url;\n     this.uri = 'http://api.testautotech.xyz' + url;\n\n    if (type === 'get') {\n      return this.get(this.uri);\n    } else {\n      // console.log(\"in post\")\n      return this.post(this.uri, data);\n    }\n\n  }\n\n  private get(url: string): any {\n    return this.http.get(url, { headers: this.getHeaders() });\n  }\n  private post(url: string, data: any): any {\n    // console.log(url)\n    return this.http.post(url, data, { headers: this.getHeaders() });\n  }\n\n  private getHeaders(): HttpHeaders {\n    const headers = new HttpHeaders();\n    headers.append('Access-Control-Allow-Origin', '*');\n    return headers;\n  }\n\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}